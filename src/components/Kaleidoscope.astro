<div class="relative w-full h-screen overflow-hidden">
  <canvas id="kaleidoscope" class="absolute inset-0 w-full h-full"></canvas>
  
  <!-- Interactive Controls -->
  <div class="absolute bottom-4 left-4 bg-black/50 p-4 rounded-lg backdrop-blur-sm">
    <div class="space-y-4">
      <div>
        <label class="block text-sm mb-1">Segments: <span id="segmentsValue">12</span></label>
        <input type="range" id="segments" min="4" max="24" value="12" class="w-full" />
      </div>
      <div>
        <label class="block text-sm mb-1">Rotation Speed: <span id="speedValue">0.005</span></label>
        <input type="range" id="speed" min="0" max="0.02" step="0.001" value="0.005" class="w-full" />
      </div>
      <div>
        <label class="block text-sm mb-1">Pattern Size: <span id="sizeValue">200</span></label>
        <input type="range" id="size" min="50" max="400" value="200" class="w-full" />
      </div>
      <div>
        <label class="block text-sm mb-1">Pattern Style</label>
        <select id="patternStyle" class="w-full bg-black/50 rounded p-1">
          <option value="triangle">Triangle</option>
          <option value="circle">Circle</option>
          <option value="star">Star</option>
        </select>
      </div>
    </div>
  </div>
</div>

<script>
  class Kaleidoscope {
    private canvas: HTMLCanvasElement;
    private ctx: CanvasRenderingContext2D;
    private mouseX: number = 0;
    private mouseY: number = 0;
    private segments: number = 12;
    private rotation: number = 0;
    private rotationSpeed: number = 0.005;
    private patternSize: number = 200;
    private patternStyle: string = 'triangle';
    private isMouseDown: boolean = false;
    private lastMouseX: number = 0;
    private lastMouseY: number = 0;

    constructor() {
      this.canvas = document.getElementById('kaleidoscope') as HTMLCanvasElement;
      this.ctx = this.canvas.getContext('2d')!;
      this.init();
      this.setupControls();
    }

    private init() {
      this.resize();
      this.setupEventListeners();
      this.animate();
    }

    private setupControls() {
      const segmentsInput = document.getElementById('segments') as HTMLInputElement;
      const speedInput = document.getElementById('speed') as HTMLInputElement;
      const sizeInput = document.getElementById('size') as HTMLInputElement;
      const patternSelect = document.getElementById('patternStyle') as HTMLSelectElement;

      segmentsInput.addEventListener('input', (e) => {
        this.segments = parseInt((e.target as HTMLInputElement).value);
        document.getElementById('segmentsValue')!.textContent = this.segments.toString();
      });

      speedInput.addEventListener('input', (e) => {
        this.rotationSpeed = parseFloat((e.target as HTMLInputElement).value);
        document.getElementById('speedValue')!.textContent = this.rotationSpeed.toFixed(3);
      });

      sizeInput.addEventListener('input', (e) => {
        this.patternSize = parseInt((e.target as HTMLInputElement).value);
        document.getElementById('sizeValue')!.textContent = this.patternSize.toString();
      });

      patternSelect.addEventListener('change', (e) => {
        this.patternStyle = (e.target as HTMLSelectElement).value;
      });
    }

    private resize() {
      this.canvas.width = window.innerWidth;
      this.canvas.height = window.innerHeight;
    }

    private setupEventListeners() {
      window.addEventListener('resize', () => this.resize());
      
      this.canvas.addEventListener('mousemove', (e) => {
        this.mouseX = e.clientX;
        this.mouseY = e.clientY;
        
        if (this.isMouseDown) {
          const dx = this.mouseX - this.lastMouseX;
          const dy = this.mouseY - this.lastMouseY;
          this.rotation += dx * 0.01;
          this.patternSize = Math.max(50, Math.min(400, this.patternSize - dy));
          document.getElementById('size')!.value = this.patternSize.toString();
          document.getElementById('sizeValue')!.textContent = this.patternSize.toString();
        }
        
        this.lastMouseX = this.mouseX;
        this.lastMouseY = this.mouseY;
      });

      this.canvas.addEventListener('mousedown', () => {
        this.isMouseDown = true;
      });

      this.canvas.addEventListener('mouseup', () => {
        this.isMouseDown = false;
      });

      this.canvas.addEventListener('mouseleave', () => {
        this.isMouseDown = false;
      });
    }

    private drawPattern() {
      switch (this.patternStyle) {
        case 'circle':
          this.ctx.beginPath();
          this.ctx.arc(0, 0, this.patternSize / 2, 0, Math.PI * 2);
          this.ctx.fill();
          break;
        case 'star':
          this.ctx.beginPath();
          for (let i = 0; i < 5; i++) {
            const angle = (i * 2 * Math.PI) / 5 - Math.PI / 2;
            const x = Math.cos(angle) * this.patternSize / 2;
            const y = Math.sin(angle) * this.patternSize / 2;
            if (i === 0) this.ctx.moveTo(x, y);
            else this.ctx.lineTo(x, y);
          }
          this.ctx.closePath();
          this.ctx.fill();
          break;
        case 'triangle':
        default:
          this.ctx.beginPath();
          this.ctx.moveTo(0, 0);
          this.ctx.lineTo(this.patternSize, 0);
          this.ctx.lineTo(this.patternSize, this.patternSize);
          this.ctx.closePath();
          this.ctx.fill();
          break;
      }
    }

    private draw() {
      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
      const centerX = this.canvas.width / 2;
      const centerY = this.canvas.height / 2;

      // Calculate mouse influence on pattern
      const mouseDistance = Math.sqrt(
        Math.pow(this.mouseX - centerX, 2) + Math.pow(this.mouseY - centerY, 2)
      );
      const maxDistance = Math.sqrt(Math.pow(this.canvas.width, 2) + Math.pow(this.canvas.height, 2)) / 2;
      const mouseInfluence = 1 - Math.min(mouseDistance / maxDistance, 1);

      for (let i = 0; i < this.segments; i++) {
        const angle = (i * 2 * Math.PI) / this.segments + this.rotation;
        
        this.ctx.save();
        this.ctx.translate(centerX, centerY);
        this.ctx.rotate(angle);
        
        // Create dynamic gradient based on mouse position
        const gradient = this.ctx.createLinearGradient(0, 0, this.patternSize, 0);
        const baseHue = (i * 360) / this.segments;
        const mouseHue = (this.mouseX / this.canvas.width) * 360;
        const finalHue = (baseHue + mouseHue * mouseInfluence) % 360;
        
        gradient.addColorStop(0, `hsl(${finalHue}, 100%, 50%)`);
        gradient.addColorStop(1, `hsl(${(finalHue + 30) % 360}, 100%, 50%)`);
        
        this.ctx.fillStyle = gradient;
        this.drawPattern();
        this.ctx.restore();
      }

      this.rotation += this.rotationSpeed;
    }

    private animate() {
      this.draw();
      requestAnimationFrame(() => this.animate());
    }
  }

  // Initialize the kaleidoscope when the page loads
  document.addEventListener('DOMContentLoaded', () => {
    new Kaleidoscope();
  });
</script> 